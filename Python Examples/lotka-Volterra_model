import numpy as np
import matplotlib.pyplot as plt

def Euler(func, X0, t, alpha, beta, delta, gamma):

    dt = t[1] - t[0]
    nt = len(t)
    X  = np.zeros([nt, len(X0)])
    X[0] = X0
    for i in range(nt-1):
        X[i+1] = X[i] + func(X[i], t[i], alpha,  beta, delta, gamma) * dt
    return X

# Constants
r = 0.1  # Prey reproduction rate
g = 0.002  # Predator reproduction rate
m = 0.2  # Predator mortality rate
h = 0.0002  # Prey-predator interaction rate

# Initial values
N0 = 1500  # Initial prey population
P0 = 50    # Initial predator population

# Simulation parameters
dt = 0.1   # Time step
num_steps = 2000  # Number of time steps

# Initialize arrays to store population values
prey_population = np.zeros(num_steps)
predator_population = np.zeros(num_steps)

# Initialize time array
time = np.arange(0, num_steps * dt, dt)

# Perform numerical integration (Lotka-volterra model of predation)
for i in range(num_steps):
    dNdt = (r * N0 - h * N0 * P0) * dt
    dPdt = (g * h * N0 * P0 -m * P0) * dt
    N0 += dNdt
    P0 += dPdt

    prey_population[i] = N0
    predator_population[i] = P0

#Table values
#for t, N_t in zip(time, prey_population):
#  print("time: " ,time, "/ N_t: " ,prey_population)

# Plotting the first graph (Density vs. Time)
plt.figure(figsize=(12, 6))
plt.subplot(121)
plt.plot(time, prey_population, label='Prey Density', color='green')
plt.plot(time, predator_population, label='Predator Density', color='red')
plt.xlabel('Time')
plt.ylabel('Density')
plt.legend()
plt.title('Density of Prey vs Predator')

# Plotting the second graph (Phase Plot)
plt.subplot(122)
plt.plot(prey_population, predator_population, label='Phase Plot', color='blue')
plt.xlabel('Prey Density')
plt.ylabel('Predator Density')
plt.title('Phase Plot of Predator Density vs. Prey Density')

# Plot predator and prey isoclines
prey_isocline = np.linspace(0, 3000, num_steps)
predator_isocline = r / h + np.zeros(num_steps)
plt.plot(prey_isocline, predator_isocline, '*', label='Prey Isocline', color='green')
plt.plot(prey_isocline, predator_isocline * (m / (g * h)), '+', label='Predator Isocline', color='red')
plt.legend()

plt.tight_layout()
plt.show()

Xe = Euler(derivative, X0, t, alpha, beta, delta, gamma)
plt.figure()
plt.title("Euler method")
plt.plot(t, Xe[:, 0], 'xb', label = 'Deer')
plt.plot(t, Xe[:, 1], '+r', label = "Wolves")
plt.grid()
plt.xlabel("Time, $t$ [s]")
plt.ylabel('Population')
plt.ylim([0.,3.])
plt.legend(loc = "best")

plt.show()
