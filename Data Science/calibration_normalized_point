# Calibration
#The matrix M recovered from the normalized points (3x4)

import numpy as np

# Load the normalized 2D and 3D points from files
pts2d_norm = np.loadtxt(" ")
pts3d_norm = np.loadtxt(" ")

# Add a column of ones to normalized 3D points to make them homogeneous
pts3d_norm_homogeneous = np.hstack((pts3d_norm, np.ones((pts3d_norm.shape[0], 1))))

# Create matrices A and B for the least squares problem
A = np.zeros((len(pts2d_norm) * 2, 12))
B = np.zeros((len(pts2d_norm) * 2, 1))

for i in range(len(pts2d_norm)):
    X, Y, Z, W = pts3d_norm_homogeneous[i]  # Use the homogeneous 3D points
    u, v = pts2d_norm[i]

    A[2 * i] = [X, Y, Z, 1, 0, 0, 0, 0, -u*X, -u*Y, -u*Z, -u]
    A[2 * i + 1] = [0, 0, 0, 0, X, Y, Z, 1, -v*X, -v*Y, -v*Z, -v]
    B[2 * i] = 0
    B[2 * i + 1] = 0

# Solve for MnormA using SVD
U, S, V = np.linalg.svd(A)
MnormA = V[-1].reshape(3, 4)

# Test MnormA by applying it to the 3D points and comparing to given 2D points
predicted_2d_points_homogeneous = np.dot(pts3d_norm_homogeneous, MnormA.T)
predicted_2d_points = predicted_2d_points_homogeneous[:, :2] / predicted_2d_points_homogeneous[:, 2][:, np.newaxis]

# Calculate residuals
residuals = np.sqrt(np.sum((predicted_2d_points - pts2d_norm) ** 2, axis=1))

# Print the residuals for each point
for i, residual in enumerate(residuals):
    print(f"Point {i + 1} Residual: {residual}")

# Print the MnormA matrix
print("\nCalculated MnormA matrix:")
print(MnormA)
